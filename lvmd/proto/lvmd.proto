/**
 * LVMd manages logical volumes of an LVM volume group.
 *
 * The protocol consists of two services:
 * - VGService provides information of the volume group.
 * - LVService provides management functions for logical volumes on the volume group.
 */
syntax = "proto3";
package proto;

option go_package = "github.com/topolvm/topolvm/lvmd/proto";

message Empty {}

// Represents a logical volume.
message LogicalVolume {
    string name = 1;          // The logical volume name.
    uint64 size_gb = 2;       // Volume size in GiB.
    uint32 dev_major = 3;     // Device major number.
    uint32 dev_minor = 4;     // Device minor number.
    repeated string tags = 5; // Tags to add to the volume during creation
}

// Represents an outstanding backup of a lv.
message Backup {
    string name = 1;          // Name of backup crd manifest
    string volume_handle = 2;       // Identifier of lv to be backed
    DataSource data_source = 3;  // Specifies a data source to be created
}

// Represents the input for CreateLV.
message CreateLVRequest {
    string name = 1;              // The logical volume name.
    uint64 size_gb = 2;           // Volume size in GiB.
    repeated string tags = 3;     // Tags to add to the volume during creation
    string device_class = 4;
    DataSource data_source = 5;
}

// Represents the input for CreateBackup
message CreateBackupRequest {
    Backup backup = 1;  // Backup that is requested
}

message DataSource {
    bool synchronous_restore = 1;
    message S3 {
        string path = 1;
        string endpoint = 2;
        bool verify_tls = 3;
        string http_proxy = 4;
        string https_proxy = 5;
        string access_key_id = 6;
        string secret_access_key = 7;
        string session_token = 8;
        string encryption_key = 9;
    }
    oneof type {
        S3 s3 = 2;
    }
}

enum StateType {
    INPROGRESS = 0;
    COMPLETE = 1;
    ERROR = 2;
}

message BackupState {
  
    string name = 1; // Name of backup the state belongs to
    StateType state = 2; // Contains state
    string msg = 3; // contains msg    
}

// Represents the response of CreateLV.
message CreateLVResponse {
    LogicalVolume volume = 1;  // Information of the created volume.
}

// Represents the input for RemoveLV.
message RemoveLVRequest {
    string name = 1;       // The logical volume name.
    string device_class = 2;
}

// Represents the response of CreateBackup.
message CreateBackupResponse {
    BackupState backup_state = 1;  // Information about backup creation.
}


// Represents the input for ResizeLV.
//
// The volume must already exist.
// The volume size will be set to exactly "size_gb".
message ResizeLVRequest {
    string name = 1;       // The logical volume name.
    uint64 size_gb = 2;    // Volume size in GiB.
    string device_class = 3;
}

// Represents the response of GetLVList.
message GetLVListResponse {
    repeated LogicalVolume volumes = 1;  // Information of volumes.
}

// Represents the response of GetFreeBytes.
message GetFreeBytesResponse {
    uint64 free_bytes = 1;  // Free space of the volume group in bytes.
}

message GetLVListRequest {
    string device_class = 1;
}

message GetFreeBytesRequest {
    string device_class = 1;
}

// Represents the stream output from Watch.
message WatchResponse {
    uint64 free_bytes = 1;  // Free space of the default volume group in bytes.
    repeated WatchItem items = 2;
}

message WatchItem {
    uint64 free_bytes = 1;  // Free space of the volume group in bytes.
    string device_class = 2;
}

// Service to manage logical volumes of the volume group.
service LVService {
    // Create a logical volume.
    rpc CreateLV(CreateLVRequest) returns (CreateLVResponse);
    // Remove a logical volume.
    rpc RemoveLV(RemoveLVRequest) returns (Empty);
    // Resize a logical volume.
    rpc ResizeLV(ResizeLVRequest) returns (Empty);
    // Create a logical volume.
    rpc CreateBackup(CreateBackupRequest) returns (CreateBackupResponse);
}

// Service to retrieve information of the volume group.
service VGService {
    // Get the list of logical volumes in the volume group.
    rpc GetLVList(GetLVListRequest) returns (GetLVListResponse);
    // Get the free space of the volume group in bytes.
    rpc GetFreeBytes(GetFreeBytesRequest) returns (GetFreeBytesResponse);
    // Stream the volume group metrics.
    rpc Watch(Empty) returns (stream WatchResponse);
}
